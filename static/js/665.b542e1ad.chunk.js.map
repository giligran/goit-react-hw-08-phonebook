{"version":3,"file":"static/js/665.b542e1ad.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContacForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactLstItem/ContactListItem.styled.js","components/ContactLstItem/ContactListItem.jsx","redux/filter/selectors.js","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from '@emotion/styled';\n\nexport const FormContact = styled.form`\n  display: flex;\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 24px;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const Input = styled.input`\n  border-radius: 8px;\n  padding-left: 8px;\n  padding-right: 8px;\n`;\n\nexport const Button = styled.button`\n  border-radius: 8px;\n  background-color: orange;\n  border: 2px solid black;\n  min-height: 24px;\n  min-width: 64px;\n  color: white;\n`;\n","export const selectLoading = state => state.contacts.isLoading;\nexport const selectAllContacts = state => state.contacts.items;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { FormContact, Input, Button } from './ContacForm.styled';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'redux/contacts/operation';\n\nexport default function ContactForm() {\n  const nameId = nanoid();\n  const numberId = nanoid();\n  const items = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n  const [contact, setContact] = useState({ name: '', number: '' });\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setContact(prevContact => ({\n      ...prevContact,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const { name, number } = contact;\n\n    if (items.some(contact => contact.name === name)) {\n      alert('Oh! This contact has already been saved');\n      setContact({ name: '', number: '' });\n      return;\n    }\n    dispatch(addContacts({ name, number }));\n    setContact({ name: '', number: '' });\n  };\n\n  return (\n    <FormContact autoComplete=\"off\" onSubmit={handleSubmit}>\n      <label htmlFor={nameId}>Name</label>\n      <Input\n        id={nameId}\n        type=\"text\"\n        name=\"name\"\n        value={contact.name}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label htmlFor={numberId}>Number</label>\n      <Input\n        id={numberId}\n        type=\"tel\"\n        name=\"number\"\n        value={contact.number}\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <Button type=\"submit\">Add contact</Button>\n    </FormContact>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  border-radius: 8px;\n  padding-left: 8px;\n  padding-right: 8px;\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/slice.js';\nimport { Input } from './Filter.styled.js';\n\nfunction Filter() {\n    const dispatch = useDispatch();\n  const [filterValue, setFilterValue] = useState('');\n\n  const handleFilterChange = event => {\n    const newValue = event.target.value;\n    setFilterValue(newValue);\n    dispatch(setFilter(newValue));\n  };\n\n  return (\n    <label>\n      Find contacts by name\n      <Input name=\"filter\" value={filterValue} onChange={handleFilterChange} />\n    </label>\n  );\n}\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  border-radius: 8px;\n  background-color: orange;\n  border: 2px solid black;\n  min-height: 24px;\n  min-width: 64px;\n  color: white;\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contacts/operation';\nimport { Button } from './ContactListItem.styled';\n\nfunction ContactListItem({ id, name, number }) {\nconst dispatch = useDispatch();\n\nconst handleDelete = () => dispatch(deleteContacts(id));\n\n  return (\n    <li>\n      {`${name}: ${number}`}\n      <Button onClick={handleDelete}>Delete contact</Button>\n    </li>\n  );\n}\n\nexport default ContactListItem;\n","export const selectFilter = state=> state.filter","import ContactListItem from 'components/ContactLstItem';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operation';\nimport { selectAllContacts, selectLoading } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/selectors';\nimport Loader from 'components/Loader/Loader';\n\nfunction ContactList() {\n  const contacts = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const visibleContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase().trim())\n  );\n\n  return isLoading ? (\n    <Loader />\n  ) : (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => {\n        return <ContactListItem key={id} id={id} name={name} number={number} />;\n      })}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport styled from '@emotion/styled';\nimport { Helmet } from 'react-helmet';\n\n// Контейнер для всей страницы\nconst Container = styled.div`\n  max-width: 1168px;\n  padding: 32px 16px;\n  margin: 0 auto;\n`;\n\n// Контейнер для списка контактов\nconst ContactsContaier = styled.div`\n  margin-top: 32px;\n`;\n\nfunction ContactsEditor() {\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Container>\n        {/* Форма для добавления контактов */}\n        <ContactForm />\n        <h2>Contacts</h2>\n        {/* Фильтр для фильтрации контактов */}\n        <Filter />\n        <ContactsContaier>\n          {/* Список контактов */}\n          <ContactList />\n        </ContactsContaier>\n      </Container>\n    </>\n  );\n}\n\nexport default ContactsEditor;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","FormContact","styled","Input","Button","selectLoading","state","contacts","isLoading","selectAllContacts","items","ContactForm","nameId","numberId","useSelector","dispatch","useDispatch","useState","name","number","contact","setContact","handleChange","event","target","value","prevContact","autoComplete","onSubmit","preventDefault","some","alert","addContacts","htmlFor","type","onChange","pattern","title","required","filterValue","setFilterValue","newValue","setFilter","onClick","deleteContacts","selectFilter","filter","useEffect","fetchContacts","visibleContacts","toLowerCase","includes","trim","Loader","map","Container","ContactsContaier","Helmet"],"sourceRoot":""}